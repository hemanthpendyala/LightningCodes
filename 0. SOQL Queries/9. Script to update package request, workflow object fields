//Submit request in the REQUESTOR
set<string> requestGlobalIdList= new set<string>();
requestGlobalIdList.add('244-EN-041566');
ICIX_V1.RequestAPI.resubmit3AProductTestRequestAtRequester(requestGlobalIdList);

//Submit request in the RESPONDER
set<string> requestGlobalIdList= new set<string>();
requestGlobalIdList.add('244-EN-041566');
ICIX_V1.RequestAPI.resubmit3AProductTestRequestAtResponder(requestGlobalIdList);

//Submit request in the LAB
set<string> requestGlobalIdList= new set<string>();
requestGlobalIdList.add('244-EN-041566');
ICIX_V1.RequestAPI.resubmit3AProductTestRequestAtVerifier(requestGlobalIdList);

//Submit request in the requestor (2-actor)
ICIX_V1.RequestAPI.resubmit2ARequestAtRequester(new Set<String> {'a0q1R00000Qbeq9QAB'}) ;

/* Script to manually submit the request in responder Org */
Savepoint sp = Database.setSavepoint();
  try {
    ICIX_V1.GlobalUtils.setRequestTriggerAllowUpdate(true);
    ICIX_V1.GlobalUtils.setWorkflowTriggerAllowUpdate(true);
    ICIX_V1.GlobalUtils.setWorkflowStepTriggerAllowUpdate(true);

List<ICIX_V1__Request__c> requests = [Select id,ICIX_V1__Status__c from ICIX_V1__Request__c where id = 'a165w00000ANYSxAAP'];
      for(ICIX_V1__Request__c rq: requests) {
          rq.ICIX_V1__Status__c = 'Open';
      } 
update requests;

List<ICIX_V1__Workflow_Instance__c> workflowInstances= [SELECT Id, Name, ICIX_V1__Request_Global_Id__c, ICIX_V1__Request__c, ICIX_V1__Status__c
                          FROM ICIX_V1__Workflow_Instance__c
                          WHERE ICIX_V1__Request__c='a163u0000056aCrAAI'];
for(ICIX_V1__Workflow_Instance__c workflowInstance: workflowInstances ){
workflowInstance.ICIX_V1__Status__c= 'Submitted by Requestor';
}
update workflowInstances;

List<ICIX_V1__Workflow_Step_Instance__c> workflowStepInstances= [SELECT Id, Name, ICIX_V1__Status__c, ICIX_V1__Workflow_Instance__c 
                              FROM ICIX_V1__Workflow_Step_Instance__c
                              WHERE ID = 'a1O3u000001qmWDEAY'];
for(ICIX_V1__Workflow_Step_Instance__c workflowStepInstance: workflowStepInstances ){
workflowStepInstance.ICIX_V1__Status__c= 'Awaiting Submit';
}
update workflowStepInstances;

    System.debug('---Success---');
  }
  catch(exception ex){
    System.debug(LoggingLevel.ERROR, '--- Error---'+ex.getMessage());
    Database.rollback(sp);
  }

///*** Script 02: Resubmit request in responder ****///////
Savepoint sp = Database.setSavepoint();
		String requestGlobalId ='';
		try {

			GlobalUtils.setRequestTriggerAllowUpdate(true);
			GlobalUtils.setWorkflowTriggerAllowUpdate(true);
			GlobalUtils.setWorkflowStepTriggerAllowUpdate(true);

			List<String> requestGlobalIdList = new List<String>();
			requestGlobalIdList.Add(requestGlobalId);
			List<Workflow_Instance__c> workflowList = [
					SELECT Id, Name, Status__c,
							Request__c
					FROM Workflow_Instance__c
					WHERE Request__r.Global_Id__c IN :requestGlobalIdList
			];
			
//Now updating workflow step status
			List<Workflow_Step_Instance__c> workflowStepList = [
					SELECT Id, Name, Status__c
					FROM Workflow_Step_Instance__c
					WHERE Workflow_Instance__r.Request_Global_ID__c In :requestGlobalIdList
					AND Workflow_Instance__r.Status__c = 'Submitted by Requestor'
					AND Name = '3-Actor Submit To Verifier'
			];
			for (Workflow_Step_Instance__c step : workflowStepList) {
				step.Status__c = 'Awaiting Submit';
			}
			Data.modify(workflowStepList);
			// Calling Batch class and passing request id into it for resubmitting requests
			List<Request__c> requestIds = [SELECT Id FROM Request__c WHERE Global_Id__c IN :requestGlobalIdList];

			Database.executeBatch(new SendBulkRequests(requestIds), 1);
			result = 'Success';
			System.debug('---Success---');
		}
		catch(exception ex){
			result= 'Error';
			System.debug(LoggingLevel.ERROR, '--- Error---'+ex.getMessage());
			Database.rollback(sp);
		}


///***CS-1202 -  Workflow mismatch: Corrective Action stuck on 'Submitted by Responder' but Closed ****///
Savepoint sp = Database.setSavepoint();
try{
	
	ICIX_V1.GlobalUtils.setRequestTriggerAllowUpdate(true);
    ICIX_V1.GlobalUtils.setWorkflowTriggerAllowUpdate(true);
	ICIX_V1__Request__c car = [SELECT ICIX_V1__Global_ID__c,ICIX_V1__Related_Request__c,ICIX_V1__Status__c,Id,Name 
									FROM ICIX_V1__Request__c WHERE ICIX_V1__Global_ID__c = '227-DV-001674'];

	car.ICIX_V1__Status__c = 'Closed';
	System.debug(LoggingLevel.ERROR, '@@@@@ car @@@@@@: '+car);

	update car;

	List<ICIX_V1__Workflow_Instance__c> listWorkflow = [SELECT Id, Name,ICIX_V1__Status__c from ICIX_V1__Workflow_Instance__c where ICIX_V1__Request_Global_Id__c = : car.ICIX_V1__Global_ID__c];

	List<ICIX_V1__Workflow_Instance__c> listWorkflowToUpdate = new List<ICIX_V1__Workflow_Instance__c>();

	for(ICIX_V1__Workflow_Instance__c w :listWorkflow){
	    if(w.ICIX_V1__Status__c != 'Approved'){
	        w.ICIX_V1__Status__c = 'Approved';
	        listWorkflowToUpdate.add(w);
	    }
	}

	System.debug(LoggingLevel.ERROR, '@@@@@ listWorkflowToUpdate @@@@@@: '+listWorkflowToUpdate);


	if(listWorkflowToUpdate.size()>0){
	    update listWorkflowToUpdate;
	}

	ICIX_V1__Request__c carToTask = [SELECT ICIX_V1__Global_ID__c,ICIX_V1__Related_Request__c,ICIX_V1__Status__c,Id,Name 
									FROM ICIX_V1__Request__c WHERE ICIX_V1__Global_ID__c = '227-DW-001676'];

	Task taskToReopen = [SELECT ICIX_V1__Request__c,ICIX_V1__Request__R.Name, ICIX_V1__Request__R.ICIX_V1__Global_ID__c, ICIX_V1__Workflow_Status__c,
									Id,Status,CreatedDate, OwnerId, Owner.FirstName, Owner.Lastname 
										FROM Task WHERE ICIX_V1__Request__c =: carToTask.Id AND Owner.Lastname = 'Castro' AND Owner.FirstName = 'Roddy' LIMIT 1];

	taskToReopen.Status = 'Open';
	System.debug(LoggingLevel.ERROR, '@@@@@ taskToReopen @@@@@@: '+taskToReopen);
	update taskToReopen;

	System.debug(LoggingLevel.ERROR, '@@@@@ END @@@@@@: ');

}catch(exception ex){
    System.debug('@@@@@ SCRIP RESULT @@@@@@: '+ex.getMessage());
    System.debug(LoggingLevel.ERROR, '@@@@@ SCRIP RESULT @@@@@@: '+ex.getMessage());
	Database.rollback(sp);
}


/////******* CS-1238 - Completed or Canceled Tasks that are Not Falling Off the Open Task List - Delete those tasks *******///////
//REQUEST LIST '154-DM-000099','154-DM-000096','154-DM-000097'
//CS-1238
Savepoint sp = Database.setSavepoint();
try{
	String reqIdToFix = '154-DM-000096';
    ICIX_V1.GlobalUtils.setRequestTriggerAllowUpdate(true);
    ICIX_V1.GlobalUtils.setWorkflowTriggerAllowUpdate(true);
    ICIX_V1.GlobalUtils.setContainerTriggerAllowUpdate(true);
    ICIX_V1.GlobalUtils.setRequestTriggerAllowUpdate(true);
	Map<String, ICIX_V1__Container__c> workflowToContainer = new Map<String, ICIX_V1__Container__c>();
	Map<String, ICIX_V1__Recipient__c> workflowToRecipient = new Map<String, ICIX_V1__Recipient__c>();
	ICIX_V1__Workflow_Instance__c wfToKeep; 
	ICIX_V1__Workflow_Instance__c wfTodelete; 
	ICIX_V1__Container__c con;
	ICIX_V1__Recipient__c re;
	System.debug(LoggingLevel.ERROR,'@@@@@ START @@@@@@: '+ reqIdToFix);

	List<ICIX_V1__Request__c> requestList = [SELECT Id, ICIX_V1__Global_ID__c,ICIX_V1__Related_Request__c,ICIX_V1__Status__c,Name 
															FROM ICIX_V1__Request__c WHERE ICIX_V1__Global_ID__c =: reqIdToFix];

	List<ICIX_V1__Workflow_Instance__c> wiList = [SELECT Id, Name, ICIX_V1__RequestStatus__c,ICIX_V1__Container__c,ICIX_V1__Request__c, ICIX_V1__Request_Global_Id__c,ICIX_V1__Status__c,ICIX_V1__Workflow_Status__c 
															FROM ICIX_V1__Workflow_Instance__c WHERE ICIX_V1__Request__c in: requestList];

	List<ICIX_V1__Recipient__c> recipientList = [SELECT Name, ICIX_V1__Request__c, ICIX_V1__Status__c, ICIX_V1__Request_Global_Id__c,ICIX_V1__Workflow_Instance__c 
 															FROM ICIX_V1__Recipient__c  WHERE ICIX_V1__Workflow_Instance__c	 in: wiList AND Name = 'Inka Foods, Inc.'];

	List<ICIX_V1__Container__c> containerList = [SELECT Id, Name, ICIX_V1__Recipient__c, ICIX_V1__Request__c, ICIX_V1__Workflow_Instance__c 
															FROM ICIX_V1__Container__c WHERE ICIX_V1__Workflow_Instance__c In: wiList]; 
	
	for(ICIX_V1__Container__c cont : containerList){
		workflowToContainer.put(cont.ICIX_V1__Workflow_Instance__c ,cont);
	}

	for(ICIX_V1__Recipient__c rec : recipientList){
		workflowToRecipient.put(rec.ICIX_V1__Workflow_Instance__c ,rec);
	}

	for(ICIX_V1__Workflow_Instance__c wf : wiList){

		if(wf.ICIX_V1__Status__c != 'Submitted by Requestor'){
			wfToKeep = wf;
		}else{
			wfTodelete = wf;
		}

	}
	System.debug(LoggingLevel.ERROR,'@@@@@ WORKFLOW TO KEEP @@@@@@: '+wfToKeep);
	System.debug(LoggingLevel.ERROR,'@@@@@ WORKFLOW TO DELETE @@@@@@: '+wfTodelete);
	
	for(ICIX_V1__Workflow_Instance__c wf : wiList){

		if(wf.id == wfToKeep.Id){
			//Update Container on correct workflow
			//1. Update Workflow id On Container
			//	 Update the WF lookup to point it to Correct WF
			con = workflowToContainer.get(wfTodelete.Id);
			con.ICIX_V1__Workflow_Instance__c = wfToKeep.Id;

			System.debug(LoggingLevel.ERROR,'@@@@@ FIXED CONTAINER TEMPLATE @@@@@@: '+con);
		}else{
			//2. Update WF lookup on Recepient:
			//Update Task (Workflow lookup ) on the Recipient:
			if(workflowToRecipient.get(wf.Id).Name == 'Inka Foods, Inc.' ){
				
				re = workflowToRecipient.get(wf.Id);
				re.ICIX_V1__Workflow_Instance__c = wfToKeep.Id;
				System.debug(LoggingLevel.ERROR,'@@@@@ FIXED RECIPIENT @@@@@@: '+re);

			}
		}
	}

	//UPDATE FIXED CONTAINER TEMPLATE
	update con;
	//UPDATE FIXED RECIPIENT
	update re;
	//Finally Delete Extra Workflow and Related Task
	List<Task> tasktoDelete = [SELECT Id, WhatId FROM Task WHERE WhatId =: wfTodelete.Id];
	System.debug(LoggingLevel.ERROR,'@@@@@ TASK TO DELETE @@@@@@: '+tasktoDelete);
	delete tasktoDelete;

	System.debug(LoggingLevel.ERROR,'@@@@@ WORKFLOW TO DELETE @@@@@@: '+wfTodelete);
	delete wfTodelete;

	//Close the Task for the correct Workflow if its already open
	List<Task> tasktoUpdate = [SELECT Id, WhatId, Status FROM Task WHERE WhatId =: wfToKeep.Id];
	for(task t : tasktoUpdate){

		if(t.Status != 'Closed'){

			t.Status = 'Closed';
		}
	}
	System.debug(LoggingLevel.ERROR,'@@@@@ TASK TO UPDATE @@@@@@: '+tasktoUpdate);
	update tasktoUpdate;

	requestList[0].ICIX_V1__Status__c ='Closed';
    update requestList[0];
}catch(exception ex){
    System.debug('@@@@@ SCRIP RESULT @@@@@@: '+ex.getMessage());
    System.debug(LoggingLevel.ERROR, '@@@@@ SCRIP RESULT @@@@@@: '+ex.getMessage());
	Database.rollback(sp);
}	


